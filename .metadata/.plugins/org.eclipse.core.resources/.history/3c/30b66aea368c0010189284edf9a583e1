package com.microstore.users;

import com.microstore.users.model.User;
import com.microstore.users.repository.UserRepository;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest
class MicrostoreUserServiceApplicationTests {

    @Autowired
    private UserRepository userRepository;

    @Test
    void contextLoads() {
        // Apenas verifica se o contexto Spring carrega sem erros
    }

    @Test
    void testCreateUser() {
        User user = new User();
        user.setName("Lucas");
        user.setEmail("lucas@example.com");

        User savedUser = userRepository.save(user);

        assertThat(savedUser.getId()).isNotNull();
        assertThat(savedUser.getName()).isEqualTo("Lucas");
        assertThat(savedUser.getEmail()).isEqualTo("lucas@example.com");
    }

    @Test
    void testFindUserById() {
        User user = new User();
        user.setName("Maria");
        user.setEmail("maria@example.com");
        User savedUser = userRepository.save(user);

        Optional<User> foundUser = userRepository.findById(savedUser.getId());
        assertThat(foundUser).isPresent();
        assertThat(foundUser.get().getName()).isEqualTo("Maria");
    }

    @Test
    void testFindAllUsers() {
        userRepository.save(new User(null, "Alice", "alice@example.com"));
        userRepository.save(new User(null, "Bob", "bob@example.com"));

        List<User> users = userRepository.findAll();
        assertThat(users.size()).isGreaterThanOrEqualTo(2);
    }

    @Test
    @Transactional
    void testUpdateUser() {
        User user = new User(null, "Carlos", "carlos@example.com");
        User savedUser = userRepository.save(user);

        savedUser.setName("Carlos Updated");
        User updatedUser = userRepository.save(savedUser);

        assertThat(updatedUser.getName()).isEqualTo("Carlos Updated");
    }

    @Test
    @Transactional
    void testDeleteUser() {
        User user = new User(null, "Diego", "diego@example.com");
        User savedUser = userRepository.save(user);

        userRepository.deleteById(savedUser.getId());
        Optional<User> deletedUser = userRepository.findById(savedUser.getId());

        assertThat(deletedUser).isNotPresent();
    }
}
