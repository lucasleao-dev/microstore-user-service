package com.payment.service.service.impl;

import com.payment.service.dto.PaymentRequest;
import com.payment.service.dto.PaymentResponse;
import com.payment.service.entity.Payment;
import com.payment.service.repository.PaymentRepository;
import com.payment.service.util.PaymentMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

/**
 * Testes unitários para PaymentServiceImpl.
 * 
 * Aqui verificamos se a lógica do serviço de pagamento funciona corretamente,
 * sem depender do banco de dados, usando Mockito para simular o repositório.
 */
class PaymentServiceImplTest {

    @Mock
    private PaymentRepository repository; // Mock do repositório para simular operações de DB

    @InjectMocks
    private PaymentServiceImpl service; // Serviço que será testado

    private Payment payment;
    private PaymentRequest request;

    @BeforeEach
    void setUp() {
        // Inicializa os mocks
        MockitoAnnotations.openMocks(this);

        // Criando um objeto de exemplo para os testes
        request = new PaymentRequest();
        // Aqui você pode adicionar campos do request, ex: request.setAmount(100.0);

        payment = new Payment();
        payment.setId(1L);
        payment.setAmount(100.0);
        payment.setStatus("CREATED");
    }

    @Test
    void testCreatePayment() {
        // Simula o comportamento do repositório: ao salvar, retorna o objeto payment
        when(repository.save(any(Payment.class))).thenReturn(payment);

        // Chamada do serviço
        PaymentResponse response = service.createPayment(request);

        // Verificações
        assertNotNull(response, "O response não deve ser nulo");
        assertEquals(payment.getId(), response.getId(), "O ID do pagamento deve ser o esperado");

        // Verifica se o repositório foi chamado exatamente 1 vez
        verify(repository, times(1)).save(any(Payment.class));
    }

    @Test
    void testGetPaymentByIdFound() {
        // Simula retorno do repositório
        when(repository.findById(1L)).thenReturn(Optional.of(payment));

        PaymentResponse response = service.getPaymentById(1L);

        assertNotNull(response, "O response não deve ser nulo");
        assertEquals(payment.getId(), response.getId(), "O ID deve ser o mesmo do payment mockado");
    }

    @Test
    void testGetPaymentByIdNotFound() {
        // Simula retorno vazio do repositório
        when(repository.findById(2L)).thenReturn(Optional.empty());

        // Verifica se a exceção é lançada
        RuntimeException exception = assertThrows(RuntimeException.class, () -> service.getPaymentById(2L));
        assertEquals("Payment not found", exception.getMessage(), "Mensagem da exceção deve ser 'Payment not found'");
    }

    @Test
    void testGetAllPayments() {
        // Simula retorno do repositório com uma lista de pagamentos
        when(repository.findAll()).thenReturn(Arrays.asList(payment));

        List<PaymentResponse> responses = service.getAllPayments();

        assertNotNull(responses, "A lista não deve ser nula");
        assertEquals(1, responses.size(), "A lista deve conter exatamente 1 pagamento");
        assertEquals(payment.getId(), responses.get(0).getId(), "O ID do pagamento deve ser o esperado");
    }
}
