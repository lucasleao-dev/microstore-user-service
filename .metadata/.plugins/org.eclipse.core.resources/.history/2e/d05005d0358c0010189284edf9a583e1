package com.microstore.users;

import com.microstore.users.model.User;
import com.microstore.users.repository.UserRepository;
import com.microstore.users.service.UserService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.is;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
class MicrostoreUserServiceApplicationTests {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private UserService userService;

    @BeforeEach
    void setUp() {
        userRepository.deleteAll();
    }

    @Test
    void contextLoads() {
        // Teste b√°sico para garantir que o contexto do Spring inicializa
    }

    @Test
    void testCreateUser() throws Exception {
        String userJson = """
                {
                    "name": "Lucas",
                    "email": "lucas@example.com"
                }
                """;

        mockMvc.perform(post("/users")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(userJson))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.name", is("Lucas")))
                .andExpect(jsonPath("$.email", is("lucas@example.com")));
    }

    @Test
    void testGetAllUsers() throws Exception {
        userRepository.save(new User(null, "Lucas", "lucas@example.com"));
        userRepository.save(new User(null, "Ana", "ana@example.com"));

        mockMvc.perform(get("/users"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(2)));
    }

    @Test
    void testGetUserById() throws Exception {
        User user = userRepository.save(new User(null, "Lucas", "lucas@example.com"));

        mockMvc.perform(get("/users/{id}", user.getId()))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.name", is("Lucas")))
                .andExpect(jsonPath("$.email", is("lucas@example.com")));
    }

    @Test
    void testUpdateUser() throws Exception {
        User user = userRepository.save(new User(null, "Lucas", "lucas@example.com"));

        String updatedJson = """
                {
                    "name": "Lucas Souza",
                    "email": "lucas.souza@example.com"
                }
                """;

        mockMvc.perform(put("/users/{id}", user.getId())
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(updatedJson))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.name", is("Lucas Souza")))
                .andExpect(jsonPath("$.email", is("lucas.souza@example.com")));
    }

    @Test
    void testDeleteUser() throws Exception {
        User user = userRepository.save(new User(null, "Lucas", "lucas@example.com"));

        mockMvc.perform(delete("/users/{id}", user.getId()))
                .andExpect(status().isOk());

        mockMvc.perform(get("/users/{id}", user.getId()))
                .andExpect(status().isNotFound());
    }
}
